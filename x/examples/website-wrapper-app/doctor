#!/bin/sh

# Copyright 2025 The Outline Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CLEAR='\033[0m'

CHECK_MARK="✅"
CROSS_MARK="❌"
WARNING_MARK="⚠️"
INFORMATION_MARK="ℹ️"

URL_NODE="https://nodejs.org/en/download/"
URL_GO="https://go.dev/doc/install"
MIN_GO_VERSION="1.21"
URL_XCODE="https://developer.apple.com/xcode/"
HINT_XCODE_CLI="Try running 'xcode-select --install' in your terminal, or install Xcode from the App Store."
URL_COCOAPODS="https://cocoapods.org/"
HINT_COCOAPODS="Try running 'sudo gem install cocoapods' or 'brew install cocoapods' in your terminal."
URL_JAVA_17="https://formulae.brew.sh/formula/openjdk@17"
HINT_JAVA_17="Make sure to add the JDK location to your \$JAVA_HOME environment variable: 'export JAVA_HOME=\$(brew --prefix openjdk@17)'"
URL_ANDROID_STUDIO="https://developer.android.com/studio#downloads"
URL_ANDROID_NDK="https://developer.android.com/studio/projects/install-ndk"

all_ok=1
is_macos=0
check_dependency() {
    local name="$1" # Name of the dependency
    local check_cmd="$2" # Command to check for
    local detail_cmd="$3" # Optional command to get details
    local expected_detail="$4" # Expected detail in the output
    local detail_fail_warning="$5" # Detail warning if the version is not correct
    local install_url="$6" # Directs user to installation instructions
    local install_hint="$7" # Optional command hint
    local output_type="${8:-stdout}"
    local dependency_found=0

    printf "Checking for ${name}... "
    if command -v "$check_cmd" >/dev/null 2>&1; then
        if [[ -n "$detail_cmd" ]]; then
            local detail_output
            # Handle commands that print version to stderr (like java)
            if [[ "$output_type" == "stderr" ]]; then
                 detail_output=$($detail_cmd 2>&1)
            else
                 detail_output=$($detail_cmd)
            fi

            if [[ -n "$expected_detail" ]] && [[ "$detail_output" == *"$expected_detail"* ]]; then
                printf "${GREEN}${CHECK_MARK} Found (%s)${CLEAR}\n" "$(echo "$detail_output" | head -n 1)"
                dependency_found=1
            elif [[ -n "$expected_detail" ]]; then
                 printf "${RED}${CROSS_MARK} Found, but version mismatch or unexpected output.${CLEAR}\n"
                 printf "  Expected something containing: %s\n" "$expected_detail"
                 printf "  Got: %s\n" "$(echo "$detail_output" | head -n 1)"
                 if [[ -n "$detail_fail_warning" ]]; then
                     printf "  ${YELLOW}${WARNING_MARK} %s${CLEAR}\n" "$detail_fail_warning"
                 fi
                  if [[ -n "$install_url" ]]; then
                     printf "  Installation guide: ${BLUE}%s${CLEAR}\n" "$install_url"
                 fi
                 if [[ -n "$install_hint" ]]; then
                   printf "  ${BLUE}${INFORMATION_MARK} %s${CLEAR}\n" "$install_hint"
                 fi
                 all_ok=0
                 dependency_found=0
            else
                 # Detail command exists, but no specific string to check, just show output
                 printf "${GREEN}${CHECK_MARK} Found (%s)${CLEAR}\n" "$(echo "$detail_output" | head -n 1)"
                 dependency_found=1
            fi
        else
             # No detail check needed, just existence
             printf "${GREEN}${CHECK_MARK} Found${CLEAR}\n"
             dependency_found=1
        fi
    else
        printf "${RED}${CROSS_MARK} Not found.${CLEAR}\n"
        if [[ -n "$install_url" ]]; then
             printf "  Installation guide: ${BLUE}%s${CLEAR}\n" "$install_url"
        fi
        if [[ -n "$install_hint" ]]; then
            printf "  ${BLUE}${INFORMATION_MARK} %s${CLEAR}\n" "$install_hint"
        fi
        all_ok=0
        dependency_found=0
    fi
    if [[ $dependency_found -eq 1 ]]; then
        return 0
    else
        return 1
    fi
}

check_version_ge() {
    local current_version="$1"
    local required_version="$2"
    if [[ "$(printf '%s\n' "$required_version" "$current_version" | sort -V | head -n1)" == "$required_version" ]]; then
        return 0
    else
        return 1
    fi
}

echo "--- Outline SDK Web Wrapper Doctor ---"
echo "Checking common dependencies..."

check_dependency "Node.js" "node" "node --version" "" "" "$URL_NODE"
if check_dependency "Go" "go" "" "" "" "$URL_GO"; then
    go_version_full=$(go version)
    go_version_num=$(echo "$go_version_full" | awk '{print $3}' | sed 's/^go//')
    printf "  Checking Go version (requires >= ${MIN_GO_VERSION})... "
    if check_version_ge "$go_version_num" "$MIN_GO_VERSION"; then
        printf "${GREEN}${CHECK_MARK} Version ${go_version_num} is sufficient.${CLEAR}\n"
    else
        printf "${RED}${CROSS_MARK} Version ${go_version_num} is too low.${CLEAR}\n"
        printf "  Please upgrade Go to version ${MIN_GO_VERSION} or higher.\n"
        printf "  Installation guide: ${BLUE}%s${CLEAR}\n" "$URL_GO"
        all_ok=0
    fi
fi

echo ""
echo "Checking OS..."
printf "Checking for macOS (required for iOS builds)... "
if [[ "$(uname)" == "Darwin" ]]; then
    printf "${GREEN}${CHECK_MARK} Found (macOS)${CLEAR}\n"
    is_macos=1
else
    printf "${YELLOW}${WARNING_MARK} Not macOS ($(uname)). iOS builds require macOS.${CLEAR}\n"
fi

echo ""
echo "Checking iOS specific dependencies..."
if [[ $is_macos -eq 1 ]]; then
    check_dependency "Xcode Command Line Tools" "xcodebuild" "xcodebuild -version" "" "" "$URL_XCODE" "$HINT_XCODE_CLI"
    check_dependency "Cocoapods" "pod" "pod --version" "" "" "$URL_COCOAPODS" "$HINT_COCOAPODS"
else
    printf "${YELLOW}Skipping iOS checks (not on macOS)${CLEAR}\n"
fi

echo ""
echo "Checking Android specific dependencies..."
# Java check - specifically looking for 17
check_dependency "Java Runtime" "java" "java -version" "version \"17." "Outline SDK requires OpenJDK 17." "$URL_JAVA_17" "$HINT_JAVA_17" "stderr"
check_dependency "JDK 17" "javac" "javac -version" "javac 17." "Ensure JDK (not just JRE) is installed and in PATH." "$URL_JAVA_17" "$HINT_JAVA_17"


# Android SDK check
printf "Checking for Android SDK (ANDROID_HOME)... "
android_sdk_path=""
if [[ -n "$ANDROID_HOME" ]] && [[ -d "$ANDROID_HOME" ]]; then
    printf "${GREEN}${CHECK_MARK} Found (ANDROID_HOME=${ANDROID_HOME})${CLEAR}\n"
    android_sdk_path="$ANDROID_HOME"
else
    printf "${RED}${CROSS_MARK} Not found.${CLEAR}\n"
    printf "  Please set either the ANDROID_HOME environment variable\n"
    printf "  pointing to your Android SDK installation.\n"
    printf "  Install Android Studio & SDK: ${BLUE}%s${CLEAR}\n" "$URL_ANDROID_STUDIO"
    all_ok=0
fi

# Android NDK check (basic check for presence)
if [[ -n "$android_sdk_path" ]]; then
    printf "Checking for Android NDK within SDK ($android_sdk_path)... "
    # Look for common NDK directory names.
    if find "$android_sdk_path" -maxdepth 2 -type d \( -name "ndk" -o -name "ndk-bundle" \) -print -quit | grep -q .; then
        printf "${GREEN}${CHECK_MARK} Found (NDK directory present)${CLEAR}\n"
    else
        printf "${RED}${CROSS_MARK} Not found.${CLEAR}\n"
        printf "  Could not find a common NDK directory ('ndk' or 'ndk-bundle') within '$android_sdk_path'.\n"
        printf "  Install NDK via Android Studio's SDK Manager: ${BLUE}%s${CLEAR}\n" "$URL_ANDROID_NDK"
        all_ok=0
    fi
else
     printf "${YELLOW}Skipping NDK check (Android SDK path not found)${CLEAR}\n"
fi


# Final Result
echo ""
if [[ $all_ok -eq 1 ]]; then
    printf "${GREEN}--- ${CHECK_MARK} All required dependencies seem to be installed! ---${CLEAR}\n"
    exit 0
else
    printf "${RED}--- ${CROSS_MARK} Some dependencies are missing or incorrect. Please review the errors above and follow the links/hints provided. ---${CLEAR}\n"
    exit 1
fi
