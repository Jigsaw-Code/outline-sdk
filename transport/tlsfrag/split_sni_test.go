package tlsfrag

import (
	"encoding/hex"
	"testing"
)

func TestMakeSplitSniFunc(t *testing.T) {

	// client hello for example.com
	exampleHexString := "010000f203036e6e645178e00c4caa6924d7e9a8cc9842c546e783835d3b58af3946184513e62081e4235a785224548d1b9996de3617e9622c13c2959d61f61f8bc53d500b7c94001ac02bc02fc02cc030cca9cca8c009c013c00ac0141301130213030100008f00000010000e00000b6578616d706c652e636f6d000b00020100ff010001000017000000120000000500050100000000000a000a0008001d001700180019000d001a0018080404030807080508060401050106010503060302010203002b00050403040303003300260024001d002026950802028351b26c54faa869d2378cb00740759e4d1d40ae3a76fb66730f2c"
	decodedExampleBytes, err := hex.DecodeString(exampleHexString)
	if err != nil {
		t.Fatalf("Failed to decode hex string: %v", err)
	}

	// client hello for google.com
	googleHexString := "010001fc0303d28ec124ee698d44aa058538a94ce5f7c43eb7af4e192faf053ec359ac1532662011d050e6a40e34bee8891c68d643e22cb19597f91ed9706ff599fe882e0c25f60024130113021303c02bc02fc02cc030cca9cca8c009c013c00ac014009c009d002f0035000a0100018f0000000f000d00000a676f6f676c652e636f6d00170000ff01000100000a00080006001d00170018000b000201000010000e000c02683208687474702f312e31000d00140012040308040401050308050501080606010201003300260024001d0020a95d499fbfb3506b582ccb50cb960b930ff26000c630a025575beeb695690940002d00020101002b0009080304030303020301001500f6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	decodedGoogleBytes, err := hex.DecodeString(googleHexString)
	if err != nil {
		t.Fatalf("Failed to decode hex string: %v", err)
	}

	tests := []struct {
		name        string
		sniSplit    int
		clientHello []byte
		want        int
	}{
		{
			name:        "Positive Split",
			sniSplit:    2,
			clientHello: decodedExampleBytes,
			want:        114,
		},
		{
			name:        "Split longer than SNI",
			sniSplit:    15,
			clientHello: decodedExampleBytes,
			want:        116,
		},
		{
			name:        "Negative Split",
			sniSplit:    -3,
			clientHello: decodedGoogleBytes,
			want:        119,
		},
		{
			name:        "No Split",
			sniSplit:    10,
			clientHello: []byte{}, // Empty client hello
			want:        0,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			splitFunc := MakeSplitSniFunc(tt.sniSplit)
			got := splitFunc(tt.clientHello)
			if got != tt.want {
				t.Errorf("MakeSplitSniFunc() with sniSplit %d = %v, want %v", tt.sniSplit, got, tt.want)
			}
		})
	}
}

/*

// meduza.io example through smart dialer setup
// clientHello: 0x010000f0030332d5f3ac710331ebf59761468a931eaf6a2b1b7adb61c44159eb9805e81eedaf20138638067ea909d8cbef5f19020e69037d689faee7ff54cc7ce5ce3f802daf52001ac02bc02fc02cc030cca9cca8c009c013c00ac01413011302130301
00008d0000000e000c0000096d6564757a612e696f000b00020100ff010001000017000000120000000500050100000000000a000a0008001d001700180019000d001a0018080404030807080508060401050106010503060302010203002b00050403040303003300260024001d002048095487fcecdaf0152659eacc749a3783a260ba6477c26eb861720faa72e019

// meduza.io
// 6D 65 64 75 7A 61 2E 69 6F
// 6d6564757a612e696f
// surroundings
// 00008d0000000e000c0000096d 6564757a612e696f
//
// alternative
// 00000016

// --------------------------------------------

// example.com example through smart dialer setup
// clientHello: 0x010000f203036e6e645178e00c4caa6924d7e9a8cc9842c546e783835d3b58af3946184513e62081e4235a785224548d1b9996de3617e9622c13c2959d61f61f8bc53d500b7c94001ac02bc02fc02cc030cca9cca8c009c013c00ac0141301130213030100008f00000010000e00000b6578616d706c652e636f6d000b00020100ff010001000017000000120000000500050100000000000a000a0008001d001700180019000d001a0018080404030807080508060401050106010503060302010203002b00050403040303003300260024001d002026950802028351b26c54faa869d2378cb00740759e4d1d40ae3a76fb66730f2c


0x

client hello type
01

length
00 00 f2

tls 1.3
03 03

client random + session ID
6e6e645178e00c4caa6924d7e9a8cc9842c546e783835d3b58af3946184513e


62081e4235a785224548d1b9996de3617e9622c13c2959d61f61f8bc53d500b7c94001ac02bc02fc02cc030cca9cca8c009c013c

cipher suites
00ac014130113021303
0100
008f

// sni extension
0000
0010
000e
00
000b
// example.com
6578616d706c652e636f6d

000b00020100ff010001000017000000120000000500050100000000000a000a0008001d001700180019000d001a0018080404030807080508060401050106010503060302010203002b00050403040303003300260024001d002026950802028351b26c54faa869d2378cb00740759e4d1d40ae3a76fb66730f2c
*/

// example.com
// 65 78 61 6D 70 6C 65 2E 63 6F 6D
// 6578616d706c652e636f6d
// surroundings
// 00008f00000010000e00000b 6578616d706c652e636f6d

// --------------------------------------------

// google.com through curl through smartdialer
// clientHello: 0x010001fc0303d28ec124ee698d44aa058538a94ce5f7c43eb7af4e192faf053ec359ac1532662011d050e6a40e34bee8891c68d643e22cb19597f91ed9706ff599fe882e0c25f60024130113021303c02bc02fc02cc030cca9cca8c009c013c00ac014009c009d002f0035000a0100018f0000000f000d00000a676f6f676c652e636f6d00170000ff01000100000a00080006001d00170018000b000201000010000e000c02683208687474702f312e31000d00140012040308040401050308050501080606010201003300260024001d0020a95d499fbfb3506b582ccb50cb960b930ff26000c630a025575beeb695690940002d00020101002b0009080304030303020301001500f6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

// google.com in hex
// 67 6F 6F 67 6C 65 2E 63 6F 6D
// 676f6f676c652e636f6d
// surroundings
// 0000000f000d00000a 676f6f676c652e636f6d
